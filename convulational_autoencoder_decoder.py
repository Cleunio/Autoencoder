# -*- coding: utf-8 -*-
"""Convulational_Autoencoder_Decoder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u2AbTeSKr3mLwWQyB5oXJTzLHOrVG1oX
"""

!pip install tensorflow==2.16.1

import numpy as np
import pandas as pd
import matplotlib
import tensorflow as tf
import sklearn

np.__version__, pd.__version__, matplotlib.__version__, tf.__version__, sklearn.__version__

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential,Model
from tensorflow.keras.layers import Dense, Input, InputLayer, Conv2D, MaxPooling2D, UpSampling2D, Flatten, Reshape
import matplotlib.pyplot as plt

(X_train, _), (X_test, _) = mnist.load_data()

X_train = X_train.reshape(len(X_train), 28, 28, 1)
X_test = X_test.reshape(len(X_test), 28, 28, 1)

X_train = X_train.astype('float32')/255
X_test = X_test.astype('float32')/255

autoenconder = Sequential()
autoencoder.add(InputLayer(shape=(28,28,1)))
autoencoder.add(Conv2D(filters=16, kernel_size=(3,3), activation='relu'))
autoencoder.add(MaxPooling2D(pool_size=(2,2)))

autoencoder.add(Conv2D(filters=8, kernel_size=(3,3), activation='relu', padding='same', strides=(2,2)))
autoencoder.add(MaxPooling2D(pool_size=(2,2), padding='same'))

autoencoder.add(Conv2D(filters=8, kernel_size=(3,3), activation='relu', padding='same', strides=(2,2)))
autoencoder.add(Flatten())



#Decoder

autoencoder.add(Reshape(4, 4, 8))

autoencoder.add(Conv2D(filters=8, kernel_size=(3,3), activation='relu', padding='same'))
autoencoder.add(UpSampling2D(size=(2,2)))

autoencoder.add(Conv2D(filters=8, kernel_size=(3,3), activation='relu', padding='same'))
autoencoder.add(UpSampling2D(size=(2,2)))

autoencoder.add(Conv2D(filters=16, kernel_size=(3,3), activation='relu'))
autoencoder.add(UpSampling2D(size=(2,2)))

autoencoder.add(Conv2D(filters=1, kernel_size=(3,3), activation='sigmoid', padding='same'))))

autoencoder.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
autoencoder.fit(X_train, X_train, epochs=10, batch_size=256, validation_data=(X_test, X_test))

encoder = Model(inputs=autoencoder.get_layer('conv2d_81').input, outputs=autoencoder.get_layer('flatten_19').output)

images_cod = encoder.predict(X_test)
imagens_cod.shape

images_decod = autoencoder.predict(X_test)
imagens_decod.shape

n_images = 10
images_test = np.random.randint(X_test.shape[0], size=n_images)
plt.figure(figsize=(18, 18))
for i, i_image in enumerate(images_test)
  o_image = plt.subplot(10, 10, i+1)
  plt.imshow(X_test[i_image].reshape(28, 28))
  plt.xticks()
  plt.yticks()

  o_image = plt.subplot(10, 10, i+1+n_images)
  plt.imshow(images_cod[i_image].reshape(8,4))
  plt.xticks()
  plt.yticks()

  o_image = plt.subplot(10, 10, i+1+n_images*2)
  plt.imshow(d_images[i_image].reshape(8,4))
  plt.xticks()
  plt.yticks()