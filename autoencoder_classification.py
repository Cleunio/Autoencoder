# -*- coding: utf-8 -*-
"""Autoencoder_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SVApMENUVtXGeK_S20pk6c7R36Kp8PM8
"""

!pip install tensorflow==2.16.1

import numpy as np
import pandas as pd
import matplotlib
import tensorflow as tf
import sklearn

np.__version__, pd.__version__, matplotlib.__version__, tf.__version__, sklearn.__version__

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import Dense, Input, InputLayer
from tensorflow.keras import utils as np_utils

(X_train, y_train),  (X_test, y_test) = mnist.load_data()

X_train = X_train.astype('float32') /255
X_test = X_test.astype('float32') /255

y_train = np_utils.to_categorical(y_train,10)
y_test = np_utils.to_categorical(y_test,10)

X_train = X_train.reshape((len(X_train), np.prod(X_train.shape[1:])))
X_test = X_test.reshape((len(X_test), np.prod(X_test.shape[1:])))

autoencoder = Sequential()
autoencoder.add(InputLayer(input_shape=(784,)))
autoencoder.add(Dense(units=32), activation='relu')
autoencoder.add(Dense(units=784), activation='sigmoid')

autoencoder.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

autoencoder.fit(X_train, X_test, epochs=50, batch_size=256, validation_data=(X_test, X_test))

autoencoder.layers

d_original = Input(shape=(784,))
layer_encoder = autoencoder.layers[0]
enconder = Model(d_original, layer_encoder(d_original))

train_cod  = encoder.predict(X_train)
test_cod  = encoder.predict(X_test)

#No Dimensionality Reduction

c1 =  Sequential()
c1.add(InputLayer(input_shape=(784,)))
c1.add(Dense(units=397, activation='relu'))
c1.add(Dense(units=397, activation='relu'))
c1.add(Dense(units=10, activation='softmax'))

c1.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
c1.fit(X_train, y_train, epochs=50, batch_size=256, validation_data=(X_test, y_test))

# Dimensionality Reduction

c1 =  Sequential()
c1.add(InputLayer(input_shape=(32,)))
c1.add(Dense(units=21, activation='relu'))
c1.add(Dense(units=21, activation='relu'))
c1.add(Dense(units=10, activation='softmax'))

c1.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
c1.fit(train_cod, y_train, epochs=50, batch_size=256, validation_data=(test_cod, y_test))